# 多阶段构建 Dockerfile for 生产环境
# 第一阶段：构建环境
FROM rust:1.75-slim as builder

# 设置构建参数
ARG RUST_VERSION=1.75
ARG TARGET=x86_64-unknown-linux-musl

# 安装构建依赖
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    musl-tools \
    musl-dev \
    gcc-x86-64-linux-gnu \
    && rm -rf /var/lib/apt/lists/*

# 添加目标平台
RUN rustup target add ${TARGET}

# 设置工作目录
WORKDIR /app

# 复制 Cargo 文件
COPY Cargo.toml Cargo.lock ./

# 创建虚拟 main.rs 以缓存依赖
RUN mkdir src && echo "fn main() {}" > src/main.rs

# 构建依赖（缓存层）
RUN cargo build --release --target ${TARGET}

# 删除虚拟文件
RUN rm -rf src

# 复制源代码
COPY src ./src
COPY benches ./benches
COPY tests ./tests
COPY config ./config
COPY scripts ./scripts

# 构建应用程序
RUN cargo build --release --target ${TARGET}

# 运行测试
RUN cargo test --release --target ${TARGET}

# 第二阶段：运行时环境
FROM alpine:3.18 as runtime

# 安装运行时依赖
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    && rm -rf /var/cache/apk/*

# 创建非 root 用户
RUN addgroup -g 1000 claude && \
    adduser -D -s /bin/sh -u 1000 -G claude claude

# 设置工作目录
WORKDIR /app

# 从构建阶段复制二进制文件
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/claude-code-rust /app/claude-code-rust

# 复制配置文件
COPY --from=builder /app/config /app/config
COPY --from=builder /app/scripts /app/scripts

# 创建必要的目录
RUN mkdir -p /app/data /app/logs /app/cache /app/temp && \
    chown -R claude:claude /app

# 设置权限
RUN chmod +x /app/claude-code-rust && \
    chmod +x /app/scripts/*.sh

# 切换到非 root 用户
USER claude

# 设置环境变量
ENV RUST_LOG=info
ENV CLAUDE_ENV=production
ENV CLAUDE_CONFIG_PATH=/app/config
ENV CLAUDE_DATA_PATH=/app/data
ENV CLAUDE_LOG_PATH=/app/logs
ENV CLAUDE_CACHE_PATH=/app/cache
ENV CLAUDE_TEMP_PATH=/app/temp

# 暴露端口
EXPOSE 8080 8443

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 启动命令
CMD ["/app/claude-code-rust", "serve", "--config", "/app/config/production.yml"]

# 元数据标签
LABEL maintainer="Claude Code Team <team@claude-code.com>"
LABEL version="1.0.0"
LABEL description="Claude Code Rust - High-performance AI coding assistant"
LABEL org.opencontainers.image.title="Claude Code Rust"
LABEL org.opencontainers.image.description="High-performance AI coding assistant written in Rust"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="Claude Code Team"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/claude-code/claude-code-rust"
LABEL org.opencontainers.image.documentation="https://docs.claude-code.com"

# 第三阶段：开发环境（可选）
FROM rust:1.75-slim as development

# 安装开发工具
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    git \
    curl \
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/*

# 安装 Rust 工具
RUN rustup component add rustfmt clippy && \
    cargo install cargo-watch cargo-edit cargo-audit

# 设置工作目录
WORKDIR /app

# 复制源代码
COPY . .

# 构建开发版本
RUN cargo build

# 暴露端口
EXPOSE 8080 8443

# 开发环境启动命令
CMD ["cargo", "run", "--", "serve", "--config", "config/development.yml"]

# 第四阶段：测试环境
FROM builder as testing

# 运行所有测试
RUN cargo test --all-features

# 运行基准测试
RUN cargo bench

# 运行代码检查
RUN cargo clippy -- -D warnings

# 运行格式检查
RUN cargo fmt -- --check

# 运行安全审计
RUN cargo audit

# 第五阶段：最小化生产镜像
FROM scratch as minimal

# 从构建阶段复制二进制文件
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/claude-code-rust /claude-code-rust

# 复制 CA 证书
COPY --from=runtime /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# 暴露端口
EXPOSE 8080

# 启动命令
ENTRYPOINT ["/claude-code-rust"]
CMD ["serve"]
